/*
    This file was generated automatically by Alchitry Labs 2.0.29-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alu #(
        parameter SIZE = 6'h20
    ) (
        input wire [(SIZE)-1:0] a,
        input wire [(SIZE)-1:0] b,
        input wire [5:0] alufn,
        output reg [(SIZE)-1:0] out,
        output reg z,
        output reg v,
        output reg n
    );
    localparam _MP_SIZE_1896243432 = SIZE;
    logic [(_MP_SIZE_1896243432)-1:0] M_adder_a;
    logic [(_MP_SIZE_1896243432)-1:0] M_adder_b;
    logic [5:0] M_adder_alufn_signal;
    logic [(_MP_SIZE_1896243432)-1:0] M_adder_out;
    logic M_adder_z;
    logic M_adder_v;
    logic M_adder_n;
    
    adder #(
        .SIZE(_MP_SIZE_1896243432)
    ) adder (
        .a(M_adder_a),
        .b(M_adder_b),
        .alufn_signal(M_adder_alufn_signal),
        .out(M_adder_out),
        .z(M_adder_z),
        .v(M_adder_v),
        .n(M_adder_n)
    );
    
    
    logic M_compare_z;
    logic M_compare_v;
    logic M_compare_n;
    logic [5:0] M_compare_alufn;
    logic M_compare_cmp;
    
    compare compare (
        .z(M_compare_z),
        .v(M_compare_v),
        .n(M_compare_n),
        .alufn(M_compare_alufn),
        .cmp(M_compare_cmp)
    );
    
    
    localparam _MP_SIZE_2013898239 = 6'h20;
    logic [31:0] M_boolean_a;
    logic [31:0] M_boolean_b;
    logic [5:0] M_boolean_alufn;
    logic [31:0] M_boolean_bool;
    
    boolean #(
        .SIZE(_MP_SIZE_2013898239)
    ) boolean (
        .a(M_boolean_a),
        .b(M_boolean_b),
        .alufn(M_boolean_alufn),
        .bool(M_boolean_bool)
    );
    
    
    logic [31:0] M_shifter_a;
    logic [4:0] M_shifter_b;
    logic [5:0] M_shifter_alufn;
    logic [31:0] M_shifter_shift;
    
    shifter shifter (
        .a(M_shifter_a),
        .b(M_shifter_b),
        .alufn(M_shifter_alufn),
        .shift(M_shifter_shift)
    );
    
    
    logic [31:0] M_multiplier_a;
    logic [31:0] M_multiplier_b;
    logic [31:0] M_multiplier_mul;
    
    multiplier multiplier (
        .a(M_multiplier_a),
        .b(M_multiplier_b),
        .mul(M_multiplier_mul)
    );
    
    
    logic [31:0] M_divider_a;
    logic [31:0] M_divider_b;
    logic [31:0] M_divider_d;
    
    divider divider (
        .a(M_divider_a),
        .b(M_divider_b),
        .d(M_divider_d)
    );
    
    
    logic [(SIZE)-1:0] temp_out;
    always @* begin
        M_adder_a = a;
        M_adder_b = b;
        M_adder_alufn_signal = alufn;
        M_boolean_a = a;
        M_boolean_b = b;
        M_boolean_alufn = alufn;
        M_compare_z = M_adder_z;
        M_compare_v = M_adder_v;
        M_compare_n = M_adder_n;
        M_compare_alufn = alufn;
        M_shifter_a = a;
        M_shifter_b = b;
        M_shifter_alufn = alufn;
        M_multiplier_a = a;
        M_multiplier_b = b;
        M_divider_a = a;
        M_divider_b = b;
        z = M_adder_z;
        v = M_adder_v;
        n = M_adder_n;
        
        case (alufn[3'h5:3'h4])
            2'h0: begin
                
                case (alufn[1'h1:1'h0])
                    2'h0: begin
                        out = M_adder_out;
                    end
                    2'h2: begin
                        out = M_multiplier_mul;
                    end
                    2'h3: begin
                        out = M_divider_d;
                    end
                    default: begin
                        out = 1'h0;
                    end
                endcase
            end
            2'h1: begin
                out = M_boolean_bool;
            end
            2'h2: begin
                out = M_shifter_shift;
            end
            2'h3: begin
                out = M_compare_cmp;
            end
            default: begin
                out = 1'h0;
            end
        endcase
    end
    
    
endmodule