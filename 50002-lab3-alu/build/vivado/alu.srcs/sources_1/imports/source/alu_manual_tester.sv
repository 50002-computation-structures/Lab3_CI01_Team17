/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alu_manual_tester (
        input wire clk,
        input wire rst,
        input wire [4:0] io_button,
        input wire [2:0][7:0] io_dip,
        output reg [2:0][7:0] io_led,
        output reg [7:0] io_segment,
        output reg [3:0] io_select,
        output reg [7:0] led
    );
    localparam _MP_SIZE_873305027 = 6'h20;
    logic [31:0] M_alu_a;
    logic [31:0] M_alu_b;
    logic [5:0] M_alu_alufn;
    logic [31:0] M_alu_out;
    logic M_alu_z;
    logic M_alu_v;
    logic M_alu_n;
    logic M_alu_illop;
    
    alu #(
        .SIZE(_MP_SIZE_873305027)
    ) alu (
        .a(M_alu_a),
        .b(M_alu_b),
        .alufn(M_alu_alufn),
        .out(M_alu_out),
        .z(M_alu_z),
        .v(M_alu_v),
        .n(M_alu_n),
        .illop(M_alu_illop)
    );
    
    
    localparam E_States_SET_A_LOW = 3'h0;
    localparam E_States_SET_A_HIGH = 3'h1;
    localparam E_States_SET_B_LOW = 3'h2;
    localparam E_States_SET_B_HIGH = 3'h3;
    localparam E_States_COMPUTE = 3'h4;
    localparam E_States_AUTO = 3'h5;
    localparam E_States_IDLE = 3'h6;
    localparam SIZE = 6'h20;
    localparam SEVEN_SEG_DIV = 5'h10;
    localparam CLK_FREQ = 24'h989680;
    localparam logic [4:0][0:0] _MP_RISE_932128591 = {{1'h1, 1'h1, 1'h1, 1'h1, 1'h1}};
    localparam logic [4:0][0:0] _MP_FALL_932128591 = {{1'h0, 1'h0, 1'h0, 1'h0, 1'h0}};
    logic [4:0] M_io_button_edge_in;
    logic [4:0] M_io_button_edge_out;
    logic [4:0] M_io_button_edge_clk = {3'h5{clk}};
    
    genvar idx_0_932128591;
    
    generate
        for (idx_0_932128591 = 0; idx_0_932128591 < 5; idx_0_932128591 = idx_0_932128591 + 1) begin: forLoop_idx_0_932128591
            edge_detector #(
                .RISE(_MP_RISE_932128591[idx_0_932128591]),
                .FALL(_MP_FALL_932128591[idx_0_932128591])
            ) io_button_edge (
                .clk(M_io_button_edge_clk[idx_0_932128591]),
                .in(M_io_button_edge_in[idx_0_932128591]),
                .out(M_io_button_edge_out[idx_0_932128591])
            );
        end
    endgenerate
    
    
    localparam logic [4:0][23:0] _MP_CLK_FREQ_800667004 = {{24'h989680, 24'h989680, 24'h989680, 24'h989680, 24'h989680}};
    localparam _MP_MIN_DELAY_800667004 = 5'h14;
    localparam _MP_NUM_SYNC_800667004 = 2'h2;
    logic [4:0] M_io_button_cond_in;
    logic [4:0] M_io_button_cond_out;
    logic [4:0] M_io_button_cond_clk = {3'h5{clk}};
    
    genvar idx_0_800667004;
    
    generate
        for (idx_0_800667004 = 0; idx_0_800667004 < 5; idx_0_800667004 = idx_0_800667004 + 1) begin: forLoop_idx_0_800667004
            button_conditioner #(
                .CLK_FREQ(_MP_CLK_FREQ_800667004[idx_0_800667004]),
                .MIN_DELAY(_MP_MIN_DELAY_800667004),
                .NUM_SYNC(_MP_NUM_SYNC_800667004)
            ) io_button_cond (
                .clk(M_io_button_cond_clk[idx_0_800667004]),
                .in(M_io_button_cond_in[idx_0_800667004]),
                .out(M_io_button_cond_out[idx_0_800667004])
            );
        end
    endgenerate
    
    
    localparam _MP_DIGITS_1828550424 = 3'h4;
    localparam _MP_DIV_1828550424 = 5'h10;
    logic [3:0][3:0] M_seg_values;
    logic [6:0] M_seg_seg;
    logic [3:0] M_seg_sel;
    
    multi_seven_seg #(
        .DIGITS(_MP_DIGITS_1828550424),
        .DIV(_MP_DIV_1828550424)
    ) seg (
        .clk(clk),
        .rst(rst),
        .values(M_seg_values),
        .seg(M_seg_seg),
        .sel(M_seg_sel)
    );
    
    
    logic [2:0] D_states_d, D_states_q = 3'h6;
    logic [31:0] D_a_value_d, D_a_value_q = 0;
    logic [31:0] D_b_value_d, D_b_value_q = 0;
    logic [31:0] D_current_value_d, D_current_value_q = 0;
    localparam _MP_DIGITS_2074952930 = 3'h4;
    localparam _MP_LEADING_ZEROS_2074952930 = 1'h1;
    logic [13:0] M_decimal_renderer_value;
    logic [3:0][3:0] M_decimal_renderer_digits;
    
    bin_to_dec #(
        .DIGITS(_MP_DIGITS_2074952930),
        .LEADING_ZEROS(_MP_LEADING_ZEROS_2074952930)
    ) decimal_renderer (
        .value(M_decimal_renderer_value),
        .digits(M_decimal_renderer_digits)
    );
    
    
    always @* begin
        D_states_d = D_states_q;
        D_a_value_d = D_a_value_q;
        D_b_value_d = D_b_value_q;
        D_current_value_d = D_current_value_q;
        
        M_io_button_cond_in = io_button;
        M_io_button_edge_in = M_io_button_cond_out;
        D_states_d = D_states_q;
        D_a_value_d = D_a_value_q;
        D_b_value_d = D_b_value_q;
        D_current_value_d = D_current_value_q;
        M_alu_a = 1'h0;
        M_alu_b = 1'h0;
        M_alu_alufn = 1'h0;
        
        case (D_states_q)
            3'h6: begin
                if (M_io_button_edge_out[1'h0]) begin
                    D_states_d = 3'h0;
                end else begin
                    if (M_io_button_edge_out[2'h2]) begin
                        D_states_d = 3'h1;
                    end else begin
                        if (M_io_button_edge_out[2'h3]) begin
                            D_states_d = 3'h2;
                        end else begin
                            if (M_io_button_edge_out[3'h4]) begin
                                D_states_d = 3'h3;
                            end else begin
                                if (M_io_button_edge_out[1'h1]) begin
                                    D_states_d = 3'h4;
                                end
                            end
                        end
                    end
                end
            end
            3'h4: begin
                M_alu_a = D_a_value_q;
                M_alu_b = D_b_value_q;
                M_alu_alufn = io_dip[2'h2][3'h5:1'h0];
                if (M_io_button_edge_out[1'h1]) begin
                    D_states_d = 3'h6;
                    D_a_value_d = 1'h0;
                    D_b_value_d = 1'h0;
                end
            end
            3'h0: begin
                D_a_value_d[4'hf:1'h0] = {io_dip[1'h1], io_dip[1'h0]};
                D_states_d = 3'h6;
            end
            3'h1: begin
                D_a_value_d[5'h1f:5'h10] = {io_dip[1'h1], io_dip[1'h0]};
                D_states_d = 3'h6;
            end
            3'h2: begin
                D_b_value_d[4'hf:1'h0] = {io_dip[1'h1], io_dip[1'h0]};
                D_states_d = 3'h6;
            end
            3'h3: begin
                D_b_value_d[5'h1f:5'h10] = {io_dip[1'h1], io_dip[1'h0]};
                D_states_d = 3'h6;
            end
        endcase
        D_current_value_d = 1'h0;
        if (M_alu_z) begin
            D_current_value_d[2'h2] = 1'h1;
            D_current_value_d[3'h5] = 1'h1;
            D_current_value_d[3'h6] = 1'h1;
        end
        if (M_alu_v) begin
            D_current_value_d[1'h1] = 1'h1;
            D_current_value_d[2'h3] = 1'h1;
        end
        if (M_alu_n) begin
            D_current_value_d[1'h0] = 1'h1;
        end
        if (M_alu_illop) begin
            D_current_value_d = 10'h3e8;
        end
        if (D_states_q == 3'h6) begin
            D_current_value_d = 1'h0;
        end
        M_decimal_renderer_value = D_current_value_q;
        M_seg_values = M_decimal_renderer_digits;
        io_segment = ~M_seg_seg;
        io_select = ~M_seg_sel;
        io_led[1'h0] = M_alu_out[3'h7:1'h0];
        io_led[1'h1] = M_alu_out[4'hf:4'h8];
        io_led[2'h2] = M_alu_out[5'h17:5'h10];
        led = M_alu_out[5'h1f:5'h18];
    end
    
    
    always @(posedge (clk)) begin
        D_states_q <= D_states_d;
        
    end
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_a_value_q <= 0;
            D_b_value_q <= 0;
            D_current_value_q <= 0;
        end else begin
            D_a_value_q <= D_a_value_d;
            D_b_value_q <= D_b_value_d;
            D_current_value_q <= D_current_value_d;
        end
    end
endmodule