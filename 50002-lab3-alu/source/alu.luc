module alu (
    input a[32],
    input b[32],
    input alufn[6],
    output out[32],
    output z,
    output v,
    output n
) {
    
    adder adder(#SIZE(32))
    compare compare()
    boolean boolean()
    shifter shifter()
    multiplier multiplier()
    
    always {
        adder.a = a;
        adder.b = b;
        adder.alufn_signal = alufn;
        
        boolean.a = a;
        boolean.b = b;
        boolean.alufn = alufn;
        
        compare.z = adder.z;
        compare.v = adder.v;
        compare.n = adder.n;
        compare.alufn = alufn;
        
        shifter.a = a;
        shifter.b = b;
        shifter.alufn = alufn;
        
        multiplier.a = a;
        multiplier.b = b;
         
        z = adder.z;
        v = adder.v;
        n = adder.n;
        
        case (alufn[5:4]) {
            b00:
                case(alufn[1]) {
                    b0: out = adder.out
                    b1: out = multiplier.mul
                    default: out = 0
                }
            b01: out = boolean.bool
            b10: out = shifter.shift
            b11: out = compare.cmp
            default: out = 0
        }
           
    }
}